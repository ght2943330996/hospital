{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  mounted() {\n    this.createBubbles();\n  },\n  methods: {\n    createBubbles() {\n      const container = document.querySelector('.container');\n      const bubbleCount = 20; // 泡泡数量\n\n      for (let i = 0; i < bubbleCount; i++) {\n        const bubble = document.createElement('div');\n        bubble.className = 'bubble';\n\n        // 随机大小\n        const size = Math.random() * 60 + 20;\n        bubble.style.width = `${size}px`;\n        bubble.style.height = `${size}px`;\n\n        // 随机位置\n        bubble.style.left = `${Math.random() * 100}%`;\n\n        // 随机动画延迟\n        bubble.style.animationDelay = `${Math.random() * 8}s`;\n\n        // 随机动画时长\n        const duration = 8 + Math.random() * 10;\n        bubble.style.animationDuration = `${duration}s`;\n        container.appendChild(bubble);\n      }\n    },\n    // 可选：定期刷新泡泡\n    refreshBubbles() {\n      setInterval(() => {\n        const container = document.querySelector('.container');\n        const bubbles = container.querySelectorAll('.bubble');\n        bubbles.forEach(bubble => {\n          // 重置泡泡位置和动画\n          bubble.style.left = `${Math.random() * 100}%`;\n          bubble.style.animation = 'none';\n          bubble.offsetHeight; // 触发重排\n          bubble.style.animation = `float-bubble ${8 + Math.random() * 10}s linear infinite`;\n        });\n      }, 8000); // 每8秒刷新一次\n    }\n  },\n\n  beforeDestroy() {\n    // 清理定时器（如果使用了refreshBubbles）\n    clearInterval(this.refreshInterval);\n  },\n  name: \"Login\",\n  data() {\n    return {\n      form: {},\n      rules: {\n        username: [{\n          required: true,\n          message: '请输入账号',\n          trigger: 'blur'\n        }],\n        password: [{\n          required: true,\n          message: '请输入密码',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  created() {},\n  methods: {\n    login() {\n      this.$refs['formRef'].validate(valid => {\n        if (valid) {\n          // 验证通过\n          this.$request.post('/login', this.form).then(res => {\n            if (res.code === '200') {\n              localStorage.setItem(\"xm-user\", JSON.stringify(res.data)); // 前端储存 在浏览器的 localStorage 中存储用户数据\n              if (res.data.role === 'NO') {\n                this.$message.warning('账号已停用，无法登录');\n                return;\n              }\n              this.$router.push('/'); // 跳转主页\n              this.$message.success('登录成功');\n            } else {\n              this.$message.error(res.msg);\n            }\n          });\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["mounted","createBubbles","methods","container","document","querySelector","bubbleCount","i","bubble","createElement","className","size","Math","random","style","width","height","left","animationDelay","duration","animationDuration","appendChild","refreshBubbles","setInterval","bubbles","querySelectorAll","forEach","animation","offsetHeight","beforeDestroy","clearInterval","refreshInterval","name","data","form","rules","username","required","message","trigger","password","created","login","$refs","validate","valid","$request","post","then","res","code","localStorage","setItem","JSON","stringify","role","$message","warning","$router","push","success","error","msg"],"sources":["src/views/Login.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <div style=\"width: 400px; padding: 30px; background-color: white; border-radius: 5px;\">\r\n      <div style=\"text-align: center; font-size: 20px; margin-bottom: 20px; color: #333\">欢迎使用</div>\r\n      <div style=\"text-align: center; font-size: 20px; margin-bottom: 20px; color: #333\">医院预约挂号系统</div>\r\n      <el-form :model=\"form\" :rules=\"rules\" ref=\"formRef\">\r\n        <el-form-item prop=\"username\">\r\n          <el-input prefix-icon=\"el-icon-user\" placeholder=\"请输入账号\" v-model=\"form.username\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item prop=\"password\">\r\n          <el-input prefix-icon=\"el-icon-lock\" placeholder=\"请输入密码\" show-password  v-model=\"form.password\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item>\r\n          <el-select v-model=\"form.role\" placeholder=\"请选择角色\" style=\"width: 100%\">\r\n            <el-option label=\"管理员\" value=\"ADMIN\"></el-option>\r\n            <el-option label=\"医护人员\" value=\"DOCTOR\"></el-option>\r\n            <el-option label=\"患者\" value=\"USER\"></el-option>\r\n          </el-select>\r\n        </el-form-item>\r\n        <el-form-item>\r\n          <el-button style=\"width: 100%; background-color: #7eb488; border-color: #7eb488; color: white\" @click=\"login\">登 录</el-button>\r\n        </el-form-item>\r\n        <div style=\"display: flex; align-items: center\">\r\n          <div style=\"flex: 1\"></div>\r\n          <div style=\"flex: 1; text-align: right\">\r\n            还没有账号？请 <a href=\"/register\">注册</a>\r\n          </div>\r\n        </div>\r\n      </el-form>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    mounted() {\r\n      this.createBubbles();\r\n    },\r\n    methods: {\r\n      createBubbles() {\r\n        const container = document.querySelector('.container');\r\n        const bubbleCount = 20; // 泡泡数量\r\n\r\n        for (let i = 0; i < bubbleCount; i++) {\r\n          const bubble = document.createElement('div');\r\n          bubble.className = 'bubble';\r\n\r\n          // 随机大小\r\n          const size = Math.random() * 60 + 20;\r\n          bubble.style.width = `${size}px`;\r\n          bubble.style.height = `${size}px`;\r\n\r\n          // 随机位置\r\n          bubble.style.left = `${Math.random() * 100}%`;\r\n\r\n          // 随机动画延迟\r\n          bubble.style.animationDelay = `${Math.random() * 8}s`;\r\n\r\n          // 随机动画时长\r\n          const duration = 8 + Math.random() * 10;\r\n          bubble.style.animationDuration = `${duration}s`;\r\n\r\n          container.appendChild(bubble);\r\n        }\r\n      },\r\n\r\n      // 可选：定期刷新泡泡\r\n      refreshBubbles() {\r\n        setInterval(() => {\r\n          const container = document.querySelector('.container');\r\n          const bubbles = container.querySelectorAll('.bubble');\r\n          bubbles.forEach(bubble => {\r\n            // 重置泡泡位置和动画\r\n            bubble.style.left = `${Math.random() * 100}%`;\r\n            bubble.style.animation = 'none';\r\n            bubble.offsetHeight; // 触发重排\r\n            bubble.style.animation = `float-bubble ${8 + Math.random() * 10}s linear infinite`;\r\n          });\r\n        }, 8000); // 每8秒刷新一次\r\n      }\r\n    },\r\n    beforeDestroy() {\r\n      // 清理定时器（如果使用了refreshBubbles）\r\n      clearInterval(this.refreshInterval);\r\n    },\r\n\r\n\r\n  \r\n  name: \"Login\",\r\n  data() {\r\n    return {\r\n      form: {},\r\n      rules: {\r\n        username: [\r\n          { required: true, message: '请输入账号', trigger: 'blur' },\r\n        ],\r\n        password: [\r\n          { required: true, message: '请输入密码', trigger: 'blur' },\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n\r\n  },\r\n  methods: {\r\n    login() {\r\n      this.$refs['formRef'].validate((valid) => {\r\n        if (valid) {\r\n          // 验证通过\r\n          this.$request.post('/login', this.form).then(res => {\r\n            if (res.code === '200') {\r\n              localStorage.setItem(\"xm-user\", JSON.stringify(res.data))  // 前端储存 在浏览器的 localStorage 中存储用户数据\r\n              if(res.data.role === 'NO'){\r\n                this.$message.warning('账号已停用，无法登录')\r\n                return\r\n              }\r\n              this.$router.push('/')  // 跳转主页\r\n              this.$message.success('登录成功')\r\n            } else {\r\n              this.$message.error(res.msg)\r\n            }\r\n          })\r\n        }\r\n      })\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.container {\r\n  height: 100vh;\r\n  overflow: hidden;\r\n  background: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);\r\n  background-size: 400% 400%;\r\n  animation: gradientBG 15s ease infinite;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: #666;\r\n  position: relative;\r\n}\r\n\r\n@keyframes gradientBG {\r\n  0% {\r\n    background-position: 0% 50%;\r\n  }\r\n  50% {\r\n    background-position: 100% 50%;\r\n  }\r\n  100% {\r\n    background-position: 0% 50%;\r\n  }\r\n}\r\n\r\n\r\n/* 添加泡泡效果 */\r\n.container::before {\r\n  content: '';\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 100%;\r\n  top: 0;\r\n  left: 0;\r\n  background: transparent;\r\n  pointer-events: none;\r\n}\r\n\r\n/* 创建多个泡泡 */\r\n.bubble {\r\n  position: absolute;\r\n  background: rgba(255, 255, 255, 0.1);\r\n  border-radius: 50%;\r\n  pointer-events: none;\r\n  backdrop-filter: blur(1px);\r\n  animation: float-bubble 8s linear infinite;\r\n}\r\n\r\n@keyframes float-bubble {\r\n  0% {\r\n    transform: translateY(100vh) scale(0);\r\n    opacity: 0;\r\n  }\r\n  50% {\r\n    opacity: 0.8;\r\n  }\r\n  100% {\r\n    transform: translateY(-20vh) scale(1);\r\n    opacity: 0;\r\n  }\r\n}\r\n\r\n/* 登录框样式增强 */\r\n.container > div {\r\n  position: relative;\r\n  z-index: 1;\r\n  box-shadow: 0 15px 35px rgba(0,0,0,0.1);\r\n  backdrop-filter: blur(10px);\r\n  transition: transform 0.3s ease;\r\n}\r\n\r\n.container > div:hover {\r\n  transform: translateY(-5px);\r\n}\r\n</style>"],"mappings":";AAkCA;EACAA,QAAA;IACA,KAAAC,aAAA;EACA;EACAC,OAAA;IACAD,cAAA;MACA,MAAAE,SAAA,GAAAC,QAAA,CAAAC,aAAA;MACA,MAAAC,WAAA;;MAEA,SAAAC,CAAA,MAAAA,CAAA,GAAAD,WAAA,EAAAC,CAAA;QACA,MAAAC,MAAA,GAAAJ,QAAA,CAAAK,aAAA;QACAD,MAAA,CAAAE,SAAA;;QAEA;QACA,MAAAC,IAAA,GAAAC,IAAA,CAAAC,MAAA;QACAL,MAAA,CAAAM,KAAA,CAAAC,KAAA,MAAAJ,IAAA;QACAH,MAAA,CAAAM,KAAA,CAAAE,MAAA,MAAAL,IAAA;;QAEA;QACAH,MAAA,CAAAM,KAAA,CAAAG,IAAA,MAAAL,IAAA,CAAAC,MAAA;;QAEA;QACAL,MAAA,CAAAM,KAAA,CAAAI,cAAA,MAAAN,IAAA,CAAAC,MAAA;;QAEA;QACA,MAAAM,QAAA,OAAAP,IAAA,CAAAC,MAAA;QACAL,MAAA,CAAAM,KAAA,CAAAM,iBAAA,MAAAD,QAAA;QAEAhB,SAAA,CAAAkB,WAAA,CAAAb,MAAA;MACA;IACA;IAEA;IACAc,eAAA;MACAC,WAAA;QACA,MAAApB,SAAA,GAAAC,QAAA,CAAAC,aAAA;QACA,MAAAmB,OAAA,GAAArB,SAAA,CAAAsB,gBAAA;QACAD,OAAA,CAAAE,OAAA,CAAAlB,MAAA;UACA;UACAA,MAAA,CAAAM,KAAA,CAAAG,IAAA,MAAAL,IAAA,CAAAC,MAAA;UACAL,MAAA,CAAAM,KAAA,CAAAa,SAAA;UACAnB,MAAA,CAAAoB,YAAA;UACApB,MAAA,CAAAM,KAAA,CAAAa,SAAA,uBAAAf,IAAA,CAAAC,MAAA;QACA;MACA;IACA;EACA;;EACAgB,cAAA;IACA;IACAC,aAAA,MAAAC,eAAA;EACA;EAIAC,IAAA;EACAC,KAAA;IACA;MACAC,IAAA;MACAC,KAAA;QACAC,QAAA,GACA;UAAAC,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,EACA;QACAC,QAAA,GACA;UAAAH,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA;MAEA;IACA;EACA;EACAE,QAAA,GAEA;EACAvC,OAAA;IACAwC,MAAA;MACA,KAAAC,KAAA,YAAAC,QAAA,CAAAC,KAAA;QACA,IAAAA,KAAA;UACA;UACA,KAAAC,QAAA,CAAAC,IAAA,gBAAAb,IAAA,EAAAc,IAAA,CAAAC,GAAA;YACA,IAAAA,GAAA,CAAAC,IAAA;cACAC,YAAA,CAAAC,OAAA,YAAAC,IAAA,CAAAC,SAAA,CAAAL,GAAA,CAAAhB,IAAA;cACA,IAAAgB,GAAA,CAAAhB,IAAA,CAAAsB,IAAA;gBACA,KAAAC,QAAA,CAAAC,OAAA;gBACA;cACA;cACA,KAAAC,OAAA,CAAAC,IAAA;cACA,KAAAH,QAAA,CAAAI,OAAA;YACA;cACA,KAAAJ,QAAA,CAAAK,KAAA,CAAAZ,GAAA,CAAAa,GAAA;YACA;UACA;QACA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}