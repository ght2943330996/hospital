{"ast":null,"code":"//解读\n//v-for=\"item in departmentData\" 中的 item 是一个临时变量名\n\n// import department from \"@/views/manager/Department.vue\";    item可以随意改\n// 数据结构示例：\n// departmentData = [\n//   { id: 1, name: '内科' },\n//   { id: 2, name: '外科' },\n//   { id: 3, name: '儿科' }\n// ]\n// <el-select v-model=\"form.departmentId\">  <!-- form.departmentId 将保存选中项的 id -->\n//   <el-option\n//       v-for=\"item in departmentData\"       <!-- 遍历每个部门 -->\n//   :key=\"item.id\"                       <!-- 每个选项的唯一标识 -->\n//   :label=\"item.name\"                   <!-- 显示的文本（如：'内科'） -->\n//   :value=\"item.id\">                    <!-- 选中后的值（如：1） -->\n// </el-option>\n// </el-select>\n\nexport default {\n  //这是代码执行的第一步\n  name: \"Doctor\",\n  // computed: {\n  //   department() {\n  //     return department\n  //   }\n  // },\n  // 1. 组件创建，执行 data 函数\n  data() {\n    return {\n      tableData: [],\n      // 所有的数据\n      pageNum: 1,\n      // 当前的页码\n      pageSize: 10,\n      // 每页显示的个数\n      total: 0,\n      username: null,\n      fromVisible: false,\n      form: {},\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\n      rules: {\n        username: [{\n          required: true,\n          message: '请输入账号',\n          trigger: 'blur'\n        }]\n      },\n      ids: [],\n      //创建用于存储批量选择的ID的空数组\n      departmentData: [] //创建用于存储所有部门数据的空数组，后面方便vue渲染\n    };\n  },\n\n  // 2. 执行 created 钩子\n  // created 是 Vue 的生命周期钩子，在组件创建时自动执行\n  created() {\n    this.load(1); // 加载医生数据\n    this.loaddepartment(); // 加载部门数据    //// 获取数据\n  },\n\n  methods: {\n    // 加载部门数据的方法\n    loaddepartment() {\n      // 发送 GET 请求到后端获取所有部门数据\n      this.$request.get('/department/selectAll').then(res => {\n        if (res.code === '200') {\n          this.departmentData = res.data; // 如果请求成功，将数据保存到 departmentData\n        } else {\n          this.$message.error(res.msg);\n        }\n      });\n    },\n    handleAdd() {\n      // 新增数据\n      this.form = {}; // 新增数据的时候清空数据\n      this.fromVisible = true; // 打开弹窗\n    },\n\n    handleEdit(row) {\n      // 编辑数据\n      this.form = JSON.parse(JSON.stringify(row)); // 给form对象赋值  注意要深拷贝数据\n      this.fromVisible = true; // 打开弹窗\n    },\n\n    save() {\n      // 保存按钮触发的逻辑  它会触发新增或者更新\n      this.$refs.formRef.validate(valid => {\n        if (valid) {\n          this.$request({\n            url: this.form.id ? '/doctor/update' : '/doctor/add',\n            method: this.form.id ? 'PUT' : 'POST',\n            data: this.form\n          }).then(res => {\n            if (res.code === '200') {\n              // 表示成功保存\n              this.$message.success('保存成功');\n              this.load(1);\n              this.fromVisible = false;\n            } else {\n              this.$message.error(res.msg); // 弹出错误的信息\n            }\n          });\n        }\n      });\n    },\n\n    del(id) {\n      // 单个删除\n      this.$confirm('您确定删除吗？', '确认删除', {\n        type: \"warning\"\n      }).then(response => {\n        this.$request.delete('/doctor/delete/' + id).then(res => {\n          if (res.code === '200') {\n            // 表示操作成功\n            this.$message.success('操作成功');\n            this.load(1);\n          } else {\n            this.$message.error(res.msg); // 弹出错误的信息\n          }\n        });\n      }).catch(() => {});\n    },\n    handleSelectionChange(rows) {\n      // 当前选中的所有的行数据\n      this.ids = rows.map(v => v.id);\n    },\n    delBatch() {\n      // 批量删除\n      if (!this.ids.length) {\n        this.$message.warning('请选择数据');\n        return;\n      }\n      this.$confirm('您确定批量删除这些数据吗？', '确认删除', {\n        type: \"warning\"\n      }).then(response => {\n        this.$request.delete('/doctor/delete/batch', {\n          data: this.ids\n        }).then(res => {\n          if (res.code === '200') {\n            // 表示操作成功\n            this.$message.success('操作成功');\n            this.load(1);\n          } else {\n            this.$message.error(res.msg); // 弹出错误的信息\n          }\n        });\n      }).catch(() => {});\n    },\n    load(pageNum) {\n      // 分页查询\n      if (pageNum) this.pageNum = pageNum;\n      this.$request.get('/doctor/selectPage', {\n        params: {\n          pageNum: this.pageNum,\n          pageSize: this.pageSize,\n          username: this.username\n        }\n      }).then(res => {\n        this.tableData = res.data?.list;\n        this.total = res.data?.total;\n      });\n    },\n    reset() {\n      this.username = null;\n      this.load(1);\n    },\n    handleCurrentChange(pageNum) {\n      this.load(pageNum);\n    },\n    handleAvatarSuccess(response, file, fileList) {\n      // 把头像属性换成上传的图片的链接\n      this.form.avatar = response.data;\n    }\n  }\n};\n//1.Vue 的主要生命周期钩子有：\n// export default {\n//   // 创建前\n//   beforeCreate() {\n//     console.log('1. 组件创建前')\n//   },\n//   // 创建后\n//   created() {  //必须要有，这是入口\n//     console.log('2. 组件创建后')\n//     // 常用于：初始化数据\n//   },\n//   // 挂载前\n//   beforeMount() {\n//     console.log('3. 组件挂载前')\n//   },\n//   // 挂载后\n//   mounted() {\n//     console.log('4. 组件挂载后')\n//     // 常用于：操作DOM、调用需要DOM的插件    //dom是传统获取页面元素然后修改元素对应值，但是vue有自动渲染，基本不用，除特殊情况：集成第三方库（地图、图表等），需要精确控制焦点\n//   }\n// }\n//2.Vue 2 的响应式限制：\n//对象\n// methods: {\n//   updateData() {\n//     // ❌ 新添加的属性不是响应式的\n//     this.form.newProp = 'value'\n//\n//     // ✅ 正确添加新属性\n//     this.$set(this.form, 'newProp', 'value')\n//     // 或者\n//     this.form = { ...this.form, newProp: 'value' }\n//   }\n// }\n//数组\n// methods: {\n//   updateArray() {\n//     // ❌ 通过索引修改数组不是响应式的\n//     this.departmentData[1] = newDept\n//\n//     // ✅ 响应式数组修改方法\n//     this.departmentData.splice(1, 1, newDept)\n//     // 或者\n//     this.$set(this.departmentData, 1, newDept)\n//   }\n// }","map":{"version":3,"names":["name","data","tableData","pageNum","pageSize","total","username","fromVisible","form","user","JSON","parse","localStorage","getItem","rules","required","message","trigger","ids","departmentData","created","load","loaddepartment","methods","$request","get","then","res","code","$message","error","msg","handleAdd","handleEdit","row","stringify","save","$refs","formRef","validate","valid","url","id","method","success","del","$confirm","type","response","delete","catch","handleSelectionChange","rows","map","v","delBatch","length","warning","params","list","reset","handleCurrentChange","handleAvatarSuccess","file","fileList","avatar"],"sources":["src/views/manager/DoctorCard.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div class=\"search\">\r\n      <el-input placeholder=\"请输入账号查询\" style=\"width: 200px\" v-model=\"username\"></el-input>\r\n      <el-button type=\"info\" plain style=\"margin-left: 10px\" @click=\"load(1)\">查询</el-button>\r\n      <el-button type=\"warning\" plain style=\"margin-left: 10px\" @click=\"reset\">重置</el-button>\r\n    </div>\r\n\r\n    <div class=\"operation\">\r\n      <el-button type=\"primary\" plain @click=\"handleAdd\">新增</el-button>\r\n      <el-button type=\"danger\" plain @click=\"delBatch\">批量删除</el-button>\r\n    </div>\r\n\r\n    <div class=\"table\" style=\"padding: 15px 20px\">\r\n      <el-row :gutter=\"20\">\r\n        <el-col :span=\"6\" v-for=\"item in tableData\" style=\"margin-bottom: 20px\">\r\n          <div style=\"text-align: center; background-color: #5b6dbf\" class=\"card\" >\r\n            <img src=\"item.avatar\" alt=\"\" style=\"width: 100px; height: 100px;border-radius:50%\">\r\n            <div style=\"font-weight: 550; margin-top: 10px\">\r\n              {{item.name}} <span style=\"color: #383535; margin-left: 5px; font-weight: 500\">{{item.departmentName}}</span>\r\n            </div>\r\n          </div>\r\n        </el-col>\r\n      </el-row>\r\n\r\n\r\n\r\n\r\n      <div class=\"pagination\">\r\n        <el-pagination\r\n            background\r\n            @current-change=\"handleCurrentChange\"\r\n            :current-page=\"pageNum\"\r\n            :page-sizes=\"[5, 10, 20]\"\r\n            :page-size=\"pageSize\"\r\n            layout=\"total, prev, pager, next\"\r\n            :total=\"total\">\r\n        </el-pagination>\r\n      </div>\r\n    </div>\r\n\r\n\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n//解读\r\n//v-for=\"item in departmentData\" 中的 item 是一个临时变量名\r\n\r\n\r\n// import department from \"@/views/manager/Department.vue\";    item可以随意改\r\n// 数据结构示例：\r\n// departmentData = [\r\n//   { id: 1, name: '内科' },\r\n//   { id: 2, name: '外科' },\r\n//   { id: 3, name: '儿科' }\r\n// ]\r\n// <el-select v-model=\"form.departmentId\">  <!-- form.departmentId 将保存选中项的 id -->\r\n//   <el-option\r\n//       v-for=\"item in departmentData\"       <!-- 遍历每个部门 -->\r\n//   :key=\"item.id\"                       <!-- 每个选项的唯一标识 -->\r\n//   :label=\"item.name\"                   <!-- 显示的文本（如：'内科'） -->\r\n//   :value=\"item.id\">                    <!-- 选中后的值（如：1） -->\r\n// </el-option>\r\n// </el-select>\r\n\r\nexport default {     //这是代码执行的第一步\r\n  name: \"Doctor\",\r\n  // computed: {\r\n  //   department() {\r\n  //     return department\r\n  //   }\r\n  // },\r\n  // 1. 组件创建，执行 data 函数\r\n  data() {\r\n    return {\r\n      tableData: [],  // 所有的数据\r\n      pageNum: 1,   // 当前的页码\r\n      pageSize: 10,  // 每页显示的个数\r\n      total: 0,\r\n      username: null,\r\n      fromVisible: false,\r\n      form: {},\r\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\r\n      rules: {\r\n        username: [\r\n          {required: true, message: '请输入账号', trigger: 'blur'},\r\n        ]\r\n      },\r\n      ids: [],     //创建用于存储批量选择的ID的空数组\r\n      departmentData: []     //创建用于存储所有部门数据的空数组，后面方便vue渲染\r\n    }\r\n  },\r\n  // 2. 执行 created 钩子\r\n  // created 是 Vue 的生命周期钩子，在组件创建时自动执行\r\n  created() {\r\n    this.load(1)      // 加载医生数据\r\n    this.loaddepartment()      // 加载部门数据    //// 获取数据\r\n  },\r\n  methods: {\r\n    // 加载部门数据的方法\r\n    loaddepartment(){\r\n      // 发送 GET 请求到后端获取所有部门数据\r\n      this.$request.get('/department/selectAll').then(res =>{\r\n        if(res.code === '200'){\r\n          this.departmentData = res.data    // 如果请求成功，将数据保存到 departmentData\r\n        }else {\r\n          this.$message.error(res.msg)\r\n        }\r\n      })\r\n    },\r\n    handleAdd() {   // 新增数据\r\n      this.form = {}  // 新增数据的时候清空数据\r\n      this.fromVisible = true   // 打开弹窗\r\n    },\r\n    handleEdit(row) {   // 编辑数据\r\n      this.form = JSON.parse(JSON.stringify(row))  // 给form对象赋值  注意要深拷贝数据\r\n      this.fromVisible = true   // 打开弹窗\r\n    },\r\n    save() {   // 保存按钮触发的逻辑  它会触发新增或者更新\r\n      this.$refs.formRef.validate((valid) => {\r\n        if (valid) {\r\n          this.$request({\r\n            url: this.form.id ? '/doctor/update' : '/doctor/add',\r\n            method: this.form.id ? 'PUT' : 'POST',\r\n            data: this.form\r\n          }).then(res => {\r\n            if (res.code === '200') {  // 表示成功保存\r\n              this.$message.success('保存成功')\r\n              this.load(1)\r\n              this.fromVisible = false\r\n            } else {\r\n              this.$message.error(res.msg)  // 弹出错误的信息\r\n            }\r\n          })\r\n        }\r\n      })\r\n    },\r\n    del(id) {   // 单个删除\r\n      this.$confirm('您确定删除吗？', '确认删除', {type: \"warning\"}).then(response => {\r\n        this.$request.delete('/doctor/delete/' + id).then(res => {\r\n          if (res.code === '200') {   // 表示操作成功\r\n            this.$message.success('操作成功')\r\n            this.load(1)\r\n          } else {\r\n            this.$message.error(res.msg)  // 弹出错误的信息\r\n          }\r\n        })\r\n      }).catch(() => {\r\n      })\r\n    },\r\n    handleSelectionChange(rows) {   // 当前选中的所有的行数据\r\n      this.ids = rows.map(v => v.id)\r\n    },\r\n    delBatch() {   // 批量删除\r\n      if (!this.ids.length) {\r\n        this.$message.warning('请选择数据')\r\n        return\r\n      }\r\n      this.$confirm('您确定批量删除这些数据吗？', '确认删除', {type: \"warning\"}).then(response => {\r\n        this.$request.delete('/doctor/delete/batch', {data: this.ids}).then(res => {\r\n          if (res.code === '200') {   // 表示操作成功\r\n            this.$message.success('操作成功')\r\n            this.load(1)\r\n          } else {\r\n            this.$message.error(res.msg)  // 弹出错误的信息\r\n          }\r\n        })\r\n      }).catch(() => {\r\n      })\r\n    },\r\n    load(pageNum) {  // 分页查询\r\n      if (pageNum) this.pageNum = pageNum\r\n      this.$request.get('/doctor/selectPage', {\r\n        params: {\r\n          pageNum: this.pageNum,\r\n          pageSize: this.pageSize,\r\n          username: this.username,\r\n        }\r\n      }).then(res => {\r\n        this.tableData = res.data?.list\r\n        this.total = res.data?.total\r\n      })\r\n    },\r\n    reset() {\r\n      this.username = null\r\n      this.load(1)\r\n    },\r\n    handleCurrentChange(pageNum) {\r\n      this.load(pageNum)\r\n    },\r\n    handleAvatarSuccess(response, file, fileList) {\r\n      // 把头像属性换成上传的图片的链接\r\n      this.form.avatar = response.data\r\n    },\r\n  }\r\n}\r\n//1.Vue 的主要生命周期钩子有：\r\n// export default {\r\n//   // 创建前\r\n//   beforeCreate() {\r\n//     console.log('1. 组件创建前')\r\n//   },\r\n//   // 创建后\r\n//   created() {  //必须要有，这是入口\r\n//     console.log('2. 组件创建后')\r\n//     // 常用于：初始化数据\r\n//   },\r\n//   // 挂载前\r\n//   beforeMount() {\r\n//     console.log('3. 组件挂载前')\r\n//   },\r\n//   // 挂载后\r\n//   mounted() {\r\n//     console.log('4. 组件挂载后')\r\n//     // 常用于：操作DOM、调用需要DOM的插件    //dom是传统获取页面元素然后修改元素对应值，但是vue有自动渲染，基本不用，除特殊情况：集成第三方库（地图、图表等），需要精确控制焦点\r\n//   }\r\n// }\r\n//2.Vue 2 的响应式限制：\r\n//对象\r\n// methods: {\r\n//   updateData() {\r\n//     // ❌ 新添加的属性不是响应式的\r\n//     this.form.newProp = 'value'\r\n//\r\n//     // ✅ 正确添加新属性\r\n//     this.$set(this.form, 'newProp', 'value')\r\n//     // 或者\r\n//     this.form = { ...this.form, newProp: 'value' }\r\n//   }\r\n// }\r\n//数组\r\n// methods: {\r\n//   updateArray() {\r\n//     // ❌ 通过索引修改数组不是响应式的\r\n//     this.departmentData[1] = newDept\r\n//\r\n//     // ✅ 响应式数组修改方法\r\n//     this.departmentData.splice(1, 1, newDept)\r\n//     // 或者\r\n//     this.$set(this.departmentData, 1, newDept)\r\n//   }\r\n// }\r\n</script>\r\n<style scoped>\r\n\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}