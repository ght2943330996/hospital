{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: \"Login\",\n  data() {\n    return {\n      form: {},\n      rules: {\n        username: [{\n          required: true,\n          message: '请输入账号',\n          trigger: 'blur'\n        }],\n        password: [{\n          required: true,\n          message: '请输入密码',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  created() {},\n  mounted() {\n    this.createFloatingChars();\n  },\n  methods: {\n    createFloatingChars() {\n      const container = document.querySelector('.container');\n      // 字符池\n      const chars = ['✚', '♡', '💊', '🏥', '💉', '+', '医'];\n      const columns = 25; // 列数\n\n      for (let i = 0; i < columns; i++) {\n        const column = document.createElement('div');\n        column.className = 'char-column';\n\n        // 随机设置列的位置\n        column.style.left = `${i * 100 / columns + Math.random() * (100 / columns)}%`;\n\n        // 为每列设置随机的动画延迟和持续时间\n        const duration = 10 + Math.random() * 20;\n        const delay = -Math.random() * 20;\n        column.style.animation = `float ${duration}s linear ${delay}s infinite`;\n\n        // 为每列生成随机数量的字符\n        const charCount = 15 + Math.floor(Math.random() * 10);\n        for (let j = 0; j < charCount; j++) {\n          const char = document.createElement('div');\n          // 从字符池中随机选择字符\n          char.textContent = chars[Math.floor(Math.random() * chars.length)];\n          char.className = 'floating-char';\n\n          // 随机设置字符的样式\n          char.style.opacity = 0.1 + Math.random() * 0.3;\n          char.style.fontSize = `${30 + Math.random() * 20}px`;\n          column.appendChild(char);\n        }\n        container.appendChild(column);\n      }\n    },\n    login() {\n      this.$refs['formRef'].validate(valid => {\n        if (valid) {\n          // 验证通过\n          this.$request.post('/login', this.form).then(res => {\n            if (res.code === '200') {\n              localStorage.setItem(\"xm-user\", JSON.stringify(res.data)); // 前端储存 在浏览器的 localStorage 中存储用户数据\n              if (res.data.role === 'NO') {\n                this.$message.warning('账号已停用，无法登录');\n                return;\n              }\n              this.$router.push('/'); // 跳转主页\n              this.$message.success('登录成功');\n            } else {\n              this.$message.error(res.msg);\n            }\n          });\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["name","data","form","rules","username","required","message","trigger","password","created","mounted","createFloatingChars","methods","container","document","querySelector","chars","columns","i","column","createElement","className","style","left","Math","random","duration","delay","animation","charCount","floor","j","char","textContent","length","opacity","fontSize","appendChild","login","$refs","validate","valid","$request","post","then","res","code","localStorage","setItem","JSON","stringify","role","$message","warning","$router","push","success","error","msg"],"sources":["src/views/Login.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <div style=\"width: 400px; padding: 30px; background-color: white; border-radius: 5px;\">\r\n      <div style=\"text-align: center; font-size: 20px; margin-bottom: 20px; color: #333\">欢迎使用</div>\r\n      <div style=\"text-align: center; font-size: 20px; margin-bottom: 20px; color: #333\">医院预约挂号系统</div>\r\n      <el-form :model=\"form\" :rules=\"rules\" ref=\"formRef\">\r\n        <el-form-item prop=\"username\">\r\n          <el-input prefix-icon=\"el-icon-user\" placeholder=\"请输入账号\" v-model=\"form.username\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item prop=\"password\">\r\n          <el-input prefix-icon=\"el-icon-lock\" placeholder=\"请输入密码\" show-password  v-model=\"form.password\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item>\r\n          <el-select v-model=\"form.role\" placeholder=\"请选择角色\" style=\"width: 100%\">\r\n            <el-option label=\"管理员\" value=\"ADMIN\"></el-option>\r\n            <el-option label=\"医护人员\" value=\"DOCTOR\"></el-option>\r\n            <el-option label=\"患者\" value=\"USER\"></el-option>\r\n          </el-select>\r\n        </el-form-item>\r\n        <el-form-item>\r\n          <el-button style=\"width: 100%; background-color: #7eb488; border-color: #7eb488; color: white\" @click=\"login\">登 录</el-button>\r\n        </el-form-item>\r\n        <div style=\"display: flex; align-items: center\">\r\n          <div style=\"flex: 1\"></div>\r\n          <div style=\"flex: 1; text-align: right\">\r\n            还没有账号？请 <a href=\"/register\">注册</a>\r\n          </div>\r\n        </div>\r\n      </el-form>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"Login\",\r\n  data() {\r\n    return {\r\n      form: {},\r\n      rules: {\r\n        username: [\r\n          { required: true, message: '请输入账号', trigger: 'blur' },\r\n        ],\r\n        password: [\r\n          { required: true, message: '请输入密码', trigger: 'blur' },\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n\r\n  },\r\n  mounted() {\r\n    this.createFloatingChars();\r\n  },\r\n  methods: {\r\n    createFloatingChars() {\r\n      const container = document.querySelector('.container');\r\n      // 字符池\r\n      const chars = ['✚', '♡', '💊', '🏥', '💉', '+', '医'];\r\n      const columns = 25; // 列数\r\n\r\n      for (let i = 0; i < columns; i++) {\r\n        const column = document.createElement('div');\r\n        column.className = 'char-column';\r\n\r\n        // 随机设置列的位置\r\n        column.style.left = `${(i * 100 / columns) + Math.random() * (100 / columns)}%`;\r\n\r\n        // 为每列设置随机的动画延迟和持续时间\r\n        const duration = 10 + Math.random() * 20;\r\n        const delay = -Math.random() * 20;\r\n        column.style.animation = `float ${duration}s linear ${delay}s infinite`;\r\n\r\n        // 为每列生成随机数量的字符\r\n        const charCount = 15 + Math.floor(Math.random() * 10);\r\n\r\n        for (let j = 0; j < charCount; j++) {\r\n          const char = document.createElement('div');\r\n          // 从字符池中随机选择字符\r\n          char.textContent = chars[Math.floor(Math.random() * chars.length)];\r\n          char.className = 'floating-char';\r\n\r\n          // 随机设置字符的样式\r\n          char.style.opacity = 0.1 + Math.random() * 0.3;\r\n          char.style.fontSize = `${30 + Math.random() * 20}px`;\r\n\r\n          column.appendChild(char);\r\n        }\r\n\r\n        container.appendChild(column);\r\n      }\r\n    },\r\n\r\n    login() {\r\n      this.$refs['formRef'].validate((valid) => {\r\n        if (valid) {\r\n          // 验证通过\r\n          this.$request.post('/login', this.form).then(res => {\r\n            if (res.code === '200') {\r\n              localStorage.setItem(\"xm-user\", JSON.stringify(res.data))  // 前端储存 在浏览器的 localStorage 中存储用户数据\r\n              if(res.data.role === 'NO'){\r\n                this.$message.warning('账号已停用，无法登录')\r\n                return\r\n              }\r\n              this.$router.push('/')  // 跳转主页\r\n              this.$message.success('登录成功')\r\n            } else {\r\n              this.$message.error(res.msg)\r\n            }\r\n          })\r\n        }\r\n      })\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.container {\r\n  height: 100vh;\r\n  overflow: hidden;\r\n  background: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);\r\n  background-size: 400% 400%;\r\n  animation: gradientBG 15s ease infinite;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: #666;\r\n}\r\n\r\n@keyframes gradientBG {\r\n  0% {\r\n    background-position: 0% 50%;\r\n  }\r\n  50% {\r\n    background-position: 100% 50%;\r\n  }\r\n  100% {\r\n    background-position: 0% 50%;\r\n  }\r\n}\r\n\r\n\r\n/* 登录框样式增强 */\r\n.container > div {\r\n  position: relative;\r\n  z-index: 1;\r\n  box-shadow: 0 15px 35px rgba(0,0,0,0.1);\r\n  backdrop-filter: blur(10px);\r\n  transition: transform 0.3s ease;\r\n}\r\n\r\n.container > div:hover {\r\n  transform: translateY(-5px);\r\n}\r\n</style>"],"mappings":";AAkCA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,IAAA;MACAC,KAAA;QACAC,QAAA,GACA;UAAAC,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,EACA;QACAC,QAAA,GACA;UAAAH,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA;MAEA;IACA;EACA;EACAE,QAAA,GAEA;EACAC,QAAA;IACA,KAAAC,mBAAA;EACA;EACAC,OAAA;IACAD,oBAAA;MACA,MAAAE,SAAA,GAAAC,QAAA,CAAAC,aAAA;MACA;MACA,MAAAC,KAAA;MACA,MAAAC,OAAA;;MAEA,SAAAC,CAAA,MAAAA,CAAA,GAAAD,OAAA,EAAAC,CAAA;QACA,MAAAC,MAAA,GAAAL,QAAA,CAAAM,aAAA;QACAD,MAAA,CAAAE,SAAA;;QAEA;QACAF,MAAA,CAAAG,KAAA,CAAAC,IAAA,MAAAL,CAAA,SAAAD,OAAA,GAAAO,IAAA,CAAAC,MAAA,YAAAR,OAAA;;QAEA;QACA,MAAAS,QAAA,QAAAF,IAAA,CAAAC,MAAA;QACA,MAAAE,KAAA,IAAAH,IAAA,CAAAC,MAAA;QACAN,MAAA,CAAAG,KAAA,CAAAM,SAAA,YAAAF,QAAA,YAAAC,KAAA;;QAEA;QACA,MAAAE,SAAA,QAAAL,IAAA,CAAAM,KAAA,CAAAN,IAAA,CAAAC,MAAA;QAEA,SAAAM,CAAA,MAAAA,CAAA,GAAAF,SAAA,EAAAE,CAAA;UACA,MAAAC,IAAA,GAAAlB,QAAA,CAAAM,aAAA;UACA;UACAY,IAAA,CAAAC,WAAA,GAAAjB,KAAA,CAAAQ,IAAA,CAAAM,KAAA,CAAAN,IAAA,CAAAC,MAAA,KAAAT,KAAA,CAAAkB,MAAA;UACAF,IAAA,CAAAX,SAAA;;UAEA;UACAW,IAAA,CAAAV,KAAA,CAAAa,OAAA,SAAAX,IAAA,CAAAC,MAAA;UACAO,IAAA,CAAAV,KAAA,CAAAc,QAAA,WAAAZ,IAAA,CAAAC,MAAA;UAEAN,MAAA,CAAAkB,WAAA,CAAAL,IAAA;QACA;QAEAnB,SAAA,CAAAwB,WAAA,CAAAlB,MAAA;MACA;IACA;IAEAmB,MAAA;MACA,KAAAC,KAAA,YAAAC,QAAA,CAAAC,KAAA;QACA,IAAAA,KAAA;UACA;UACA,KAAAC,QAAA,CAAAC,IAAA,gBAAAzC,IAAA,EAAA0C,IAAA,CAAAC,GAAA;YACA,IAAAA,GAAA,CAAAC,IAAA;cACAC,YAAA,CAAAC,OAAA,YAAAC,IAAA,CAAAC,SAAA,CAAAL,GAAA,CAAA5C,IAAA;cACA,IAAA4C,GAAA,CAAA5C,IAAA,CAAAkD,IAAA;gBACA,KAAAC,QAAA,CAAAC,OAAA;gBACA;cACA;cACA,KAAAC,OAAA,CAAAC,IAAA;cACA,KAAAH,QAAA,CAAAI,OAAA;YACA;cACA,KAAAJ,QAAA,CAAAK,KAAA,CAAAZ,GAAA,CAAAa,GAAA;YACA;UACA;QACA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}